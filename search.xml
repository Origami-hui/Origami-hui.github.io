<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>test</title>
      <link href="/2023/11/04/test/"/>
      <url>/2023/11/04/test/</url>
      
        <content type="html"><![CDATA[<span style="font-size: 15px;"><span id="more"></span><p><img src="/./postImg/test.jpg" alt="300px"></p></span><style>    img[alt="300px"]{        width:300px;    }</style>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>从制作OC形象到导入Unity并让角色动起来</title>
      <link href="/2023/11/04/oc2unity/"/>
      <url>/2023/11/04/oc2unity/</url>
      
        <content type="html"><![CDATA[<span style="font-size: 15px;"><p>一直想让自己以前设计的oc能变成3d并且让她作为RPG的主角动起来，并且以此为契机熟悉3d建模与游戏开发领域，于是有了标题的这个想法。</p><p>这里记录一下新人第一次从Vroid捏OC，导入blender转fbx，以及导入Unity通过修改官方的Third Person Controller来让角色动起来这个过程中所踩的坑，也顺便整理一下这一路的开发思路。这里许多地方都是参考了各路大佬的教程来进行的，写到的时候也会贴上链接，在这里再次感谢这些大佬~</p><p><strong>使用软件</strong>：Vroid v1.19.0，Blender2.93（3以上的版本安装CATS插件可能会出错），unity2022.1</p><span id="more"></span><ul><li><strong>Vroid捏oc，绘制贴图</strong></li></ul><p>首先需要对自己想要捏的形象有个大概的设定，在Vroid可以很方便选择与设定相近的素体并进行贴图纹理绘制，或者直接用现成的贴图，是一个十分好上手的软件，同时vrm的材质渲染比较偏三渲二画风这也是我选择该软件的主要原因。这里主要参考视频BV19L4y157aS，这里主要记录下踩过的坑：</p><ol><li>脸部的头发阴影不要绘制太大，否则闭眼动作的时候可能会出现穿帮。可以拉动闭眼表情查看并进行调节；</li></ol><p><img src="/./postImg/46d330f02ab32c5265d258f124aae2e7.png" alt="600px"></p><ol><li>如果想绘制发饰或者其他部位的饰品又没有想要的素体，一个偷懒的方法是在新建的纹理上直接进行绘制（可以导出纹理图层到ps或者sai等绘画软件进行精修），不过这样不能对饰品做体积，只能说有利有弊吧。</li></ol><p><img src="/./postImg/aa6165cf559d6329bb48b6c5541305cb.png" alt="600px"></p><ol><li>绘制好头发点击<strong>编辑头发骨骼</strong>会自动生成头发骨骼，进入编辑界面可以对不想要绑定骨骼的头发从头发组里删除。这里前发建议骨骼数设为1，不然后面可能会出现乱飘的现象。</li></ol><p><img src="/./postImg/3f133e4a5558bebbe4001873f1f2826d.png" alt="600px"></p><ul><li><strong>导出vrm文件并在blender进行fbx格式转换</strong></li></ul><p>捏好模型之后右上方导出vrm文件即可。为了能顺利导入Unity，这里的做法是先用blender转成fbx格式并合成材质球。教程指路：BV1up4y1S71w。需要安装的插件视频里也有贴。这里主要的踩坑点有：</p><ol><li>导入vrm文件后没有生成对应的材质球。这里不要用插件的导入按钮进行导入，直接从blender菜单进行导入并勾选第一个选项即可。</li></ol><p><img src="/./postImg/6985d1440098811c0a2e0d09aeb4c3cf.png" alt="600px"></p><ol start="2"><li>点击Save Atlas to..的时候，没有跳出保存路径选择，并且也没有合并材质而是把其他材质都删了只留了一个下来。</li></ol><p><img src="/./postImg/c49f1d17bdd8419251937ca1e38e14c2.png" alt="200px"></p><p>教程的留言里也有很多人碰到这个问题。这里我的做法是将blender的系统语言<strong>调成英文</strong>，同时vrm文件路径尽量不要出现中文，再来尝试，合并材质就没问题了。如果还是不行就删掉刚刚的blender文件再新建项目再来重试。</p><p>合并好之后点击ExportModel导出fbx文件就好了。</p><p><img src="/./postImg/a3eece2ba2c18e4b25266515a7749e95.png" alt="300px"></p><ul><li><strong>将fbx文件导入Unity并修改Shader</strong></li></ul><p>把模型导入Unity并将合成好的材质球拖入人物，可以看到模型会出现各种黑边，是因为材质球的透明区域被映成了黑色。这里我安装UniVRM（<a href="https://github.com/vrm-c/UniVRM%EF%BC%89%E4%B9%8B%E5%90%8E%EF%BC%8C%E9%80%89%E6%8B%A9VRM/MToon%E4%BD%9C%E4%B8%BAShader%EF%BC%8C%E5%B9%B6%E5%9C%A8Rendering">https://github.com/vrm-c/UniVRM）之后，选择VRM/MToon作为Shader，并在Rendering</a> Type处选择<strong>Cutout</strong>来保留透明网格，同时可以将Outline（模型的边缘线）调大来尽量还原三渲二的材质。</p><p><img src="/./postImg/e3ddf1cd86b8ee899750fa6f922763b6.png" alt="600px"></p><ul><li><strong>导入Third Person Controller尝试按键操作角色</strong></li></ul><p>成功导入Unity只是完成的第一步，接下来如何让角色在我们的操作下动起来才会让事情变得有趣。这里我选择使用官方的第三人称控制器来操作角色。</p><p>资源链接：<a href="https://assetstore.unity.com/packages/essentials/starter-assets-third-person-character-controller-196526#reviews">https://assetstore.unity.com/packages/essentials/starter-assets-third-person-character-controller-196526#reviews</a></p><p>导入资源之后将资源文件Scene&#x2F;Playground场景下的小人与跟随相机复制到你的场景下。然后将你的角色的骨骼与皮肤文件（Armture、Body）搬到小人的文件下并删除掉小人本身的骨骼与皮肤：</p><p><img src="/./postImg/7fce9eac332698ae7aed4a6ecdfae2a8.png" alt="300px"></p><p>然后将控制器与你的角色的Avatar赋予人物即可。</p><p><img src="/./postImg/8708c476c1a9130148c50705b413246a.png" alt="600px"></p><p>这个时候点击运行用键盘操作一下角色应该就能动起来了。虽然动作可能会十分奇怪，这是因为动画绑定的骨骼与模型的骨骼不匹配，修改教程指路：BV1fg411w7HT。如果对动作本身不满意，这里提到的网站（<a href="https://www.mixamo.com/%EF%BC%89%E9%87%8C%E4%B9%9F%E6%9C%89%E8%AE%B8%E5%A4%9A%E5%8A%A8%E4%BD%9C%E7%B4%A0%E6%9D%90%E5%8F%AF%E4%BB%A5%E4%B8%8B%E8%BD%BD%EF%BC%8C%E5%AF%BC%E5%85%A5%E5%90%8E%E4%BF%AE%E6%94%B9Rig%E7%9A%84%E5%8A%A8%E7%94%BB%E7%B1%BB%E5%9E%8B%E4%B8%BA**Humanoid">https://www.mixamo.com/）里也有许多动作素材可以下载，导入后修改Rig的动画类型为**Humanoid</a>**</p><p><img src="/./postImg/67aacbd86928784f8feb02a373d148b8.png" alt="300px"></p><p>然后在Controller的状态机里将原动作替换掉，并按照视频的方法调整下骨骼即可。如替换跑步动作：</p><p><img src="/./postImg/0f5366a02ae7e7e996bcf58df3d3a4d2.png" alt="600px"></p><br><ul><li><strong>让角色头发随动</strong></li></ul><p>让角色动起来之后发现头发并不会随着飘动起来而是保持着原来的形状移动着，这时需要给头发添加一个动态骨骼。Unity插件链接：</p><p><a href="https://pan.baidu.com/s/11Pth4d1oynVl5gXyngs29w">https://pan.baidu.com/s/11Pth4d1oynVl5gXyngs29w</a> 提取码：fang</p><p>导入插件后找到角色的头发所在的父级目录，在上面添加<strong>Dynamic Bone</strong>组件即可自动生成动态骨骼，调整Damping、Elasticity等参数让其飘动更加自然（我的参数如下图）。在Colliders栏可以添加骨骼碰撞体尽量防止头发穿模。Exclusions栏可以添加父级目录下不想添加动态骨骼的物件（如在Head文件下的眼睛、碎发等）</p><p><img src="/./postImg/6cc9e0f38ca77a60bf4f5210910a3ee3.png" alt="600px"></p><ul><li><strong>给新动作添加走路音效</strong></li></ul><p>由于新替换的动作没有添加触发音效事件，如替换掉走路的动作后，走起路来原本挂载在ThirdPerson Controller脚本的音效就不会触发。进到脚本我们可以看到官方自带的有两种音效触发的方法，OnFootstep是走路或跑步触发音效事件，OnLand是人物落地触发音效事件。这里我修改了走路的动作，因此要给新动作添加回OnFootstep事件。</p><p>具体的添加方式为：</p><p><img src="/./postImg/3f7438c300bd3b1ff5022baea5dbbc4f.png" alt="600px"></p><p>在动作文件的Animation&#x2F;Events设置中的时间轴出选中两次脚落地的时刻，添加事件即可。</p><p><img src="/./postImg/33b07028903c2a2ec77cc19bd381e276.gif" alt="600px"></p><br><p>完成这些操作之后，制作的oc形象终于能比较顺心地动起来啦，虽然还有很多细节还需要调整，但还是想记录这么一个文档让自己爽一下。后面就可以操作你的角色进行你的RPG游戏啦，谢谢你能看到这里~</p></span><style>    img[alt="300px"]{        width:300px;    }    img[alt="400px"]{        width:400px;    }    img[alt="500px"]{        width:500px;    }    img[alt="600px"]{        width:600px;    }    img[alt="800px"]{        width:800px;    }</style>]]></content>
      
      
      <categories>
          
          <category> Unity游戏开发 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>自制锁定怪物镜头与自由镜头丝滑切换</title>
      <link href="/2023/11/03/words1/"/>
      <url>/2023/11/03/words1/</url>
      
        <content type="html"><![CDATA[<span style="font-size: 15px;"><p>Unity中，在开发战斗系统的时候需要镜头从第三人称自由镜头切换到锁定怪物镜头的情况，从而使得玩家方便进行战斗与自由移动。用Cinemachine虚拟相机的LookAt来进行锁定的效果始终不符合预期（也可能是我没有调到合适的参数），于是就试着参考网上的教程 <a href="https://www.youtube.com/watch?v=ud3_tderJOQ">Souls-like Part 155 Lock On Logic - Unity Tutorial</a> 来自己制作镜头和镜头切换了，这里就大概记录一下吧：</p><span id="more"></span><ul><li>创建空对象CameraHolder，将他的位置放在角色的后脑勺，并创建子对象Pivot（意思是中心点，转动中枢），将主相机放在Pivot内，调整相机的位置使得相机能照到角色全身。</li></ul><p><img src="/./postImg/unity1.png" alt="600px"></p><ul><li>创建Camera Manager脚本，并挂载到Camera Holder处，以下是定义的一些参数。</li></ul><p><img src="/./postImg/unity2.png" alt="300px"></p><div style="color: #999; text-align: center;" >CameraHolder挂载脚本及其参数</div><ul><li>声明的参数和初始化如下：</li></ul><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> Transform targetTransform; <span class="comment">//相机跟随目标（即玩家）</span></span><br><span class="line"><span class="keyword">public</span> Transform lockTarget;  <span class="comment">//相机锁定的目标（即敌人）</span></span><br><span class="line"><span class="keyword">public</span> Transform pivot; <span class="comment">//相机中心点对象</span></span><br><span class="line"><span class="keyword">public</span> <span class="built_in">float</span> followSpeed = <span class="number">0.1f</span>; <span class="comment">//相机跟随速度</span></span><br><span class="line"><span class="keyword">public</span> <span class="built_in">float</span> rotateSpeed = <span class="number">1</span>;  <span class="comment">//相机旋转速度</span></span><br><span class="line"><span class="keyword">public</span> <span class="built_in">float</span> TopClamp = <span class="number">70.0f</span>;  <span class="comment">//相机俯视最大角</span></span><br><span class="line"><span class="keyword">public</span> <span class="built_in">float</span> BottomClamp = <span class="number">-60.0f</span>;  <span class="comment">//相机仰视最大角</span></span><br><span class="line"><span class="keyword">public</span> Image lockDot;  <span class="comment">//锁定圆点UI</span></span><br><span class="line"><span class="keyword">public</span> <span class="built_in">bool</span> isLocked;  <span class="comment">//是否锁定标志</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="built_in">float</span> lookAngle;  <span class="comment">//横向角度</span></span><br><span class="line"><span class="keyword">private</span> <span class="built_in">float</span> pivotAngle;  <span class="comment">//纵向角度</span></span><br><span class="line"><span class="keyword">private</span> Transform _transform;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">Awake</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    _transform = <span class="keyword">this</span>.transform;</span><br><span class="line">    lockDot.enabled = <span class="literal">false</span>;</span><br><span class="line">    isLocked = <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>编写脚本函数，主要的函数有三个：</li></ul><ol><li>根据鼠标移动让镜头延迟跟随的函数，这部分根据玩家角色位置做个Lerp跟随就可以了：</li></ol><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Tick</span>(<span class="params"><span class="built_in">float</span> delta</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 相机延迟跟随</span></span><br><span class="line">    Vector3 targetPosition = Vector3.Lerp(_transform.position, targetTransform.position, delta / followSpeed);</span><br><span class="line">    _transform.position = targetPosition;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>镜头转角函数（是实现切换镜头的核心函数，我以自己的理解写了一些注解，仅供参考）：</li></ol><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">HandleRotation</span>(<span class="params"><span class="built_in">float</span> delta, <span class="built_in">float</span> mouseX, <span class="built_in">float</span> mouseY</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (lockTarget == <span class="literal">null</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 无锁定时的转向</span></span><br><span class="line">        lookAngle += mouseX * (delta / rotateSpeed);    <span class="comment">//根据鼠标横向输入转化当前镜头横向角度</span></span><br><span class="line">        pivotAngle += mouseY * (delta / rotateSpeed);   <span class="comment">//根据鼠标纵向输入转化当前镜头纵向角度</span></span><br><span class="line">        pivotAngle = Mathf.Clamp(pivotAngle, BottomClamp, TopClamp);    <span class="comment">//限制纵向角度</span></span><br><span class="line"></span><br><span class="line">        Vector3 euler = Vector3.zero;</span><br><span class="line">        euler.y = lookAngle;</span><br><span class="line">        euler.x = pivotAngle;</span><br><span class="line">        Quaternion targetRotation = Quaternion.Euler(euler);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//让镜头的旋转角赋值为当前所应该转到的横纵角</span></span><br><span class="line">        _transform.rotation = targetRotation;</span><br><span class="line">        pivot.rotation = Quaternion.Lerp(pivot.rotation, targetRotation, delta/ <span class="number">0.25f</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 锁定时转向</span></span><br><span class="line">        Vector3 lockPos = lockTarget.position;</span><br><span class="line">        Vector3 dir = lockPos - _transform.position;</span><br><span class="line">        dir.Normalize();</span><br><span class="line">        dir.y = <span class="number">0</span>;</span><br><span class="line">        Quaternion targetRotation = Quaternion.LookRotation(dir);   <span class="comment">//镜头目标转向为玩家角色到当前锁定目标的向量的横向平面分量</span></span><br><span class="line"></span><br><span class="line">        Vector3 pivotDir = lockPos - pivot.position;</span><br><span class="line">        pivotDir.Normalize();</span><br><span class="line">        Quaternion pivotTargetRotation = Quaternion.LookRotation(pivotDir);</span><br><span class="line">        Vector3 e = pivotTargetRotation.eulerAngles;</span><br><span class="line">        e.y = <span class="number">0</span>;    <span class="comment">//只考虑垂直转向，即pivot指向玩家角色到当前锁定目标的向量的纵向分量</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//让镜头角度和pivot角度线性变化，实现丝滑转换自由镜头和锁定镜头</span></span><br><span class="line">        _transform.rotation = Quaternion.Lerp(_transform.rotation, targetRotation, Time.fixedDeltaTime / <span class="number">0.25f</span>);</span><br><span class="line">        pivot.localEulerAngles = Vector3.Lerp(pivot.localEulerAngles, e, Time.fixedDeltaTime / <span class="number">0.25f</span>);</span><br><span class="line"></span><br><span class="line">        pivotAngle = <span class="number">0</span>;     <span class="comment">//清空当前的纵向角度，使得解锁镜头时镜头不会出现突变</span></span><br><span class="line">        lookAngle = _transform.eulerAngles.y;   <span class="comment">//使读入的镜头横向角度始终为当前角度值，同样是为了使得解锁镜头时镜头不会出现突变</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>通过外部按键切换锁定状态函数：</li></ol><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">SwitchLockOnState</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>(lockTarget == <span class="literal">null</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        Vector3 modelOrigin = targetTransform.position;</span><br><span class="line">        Vector3 boxCenter = modelOrigin + targetTransform.transform.forward * <span class="number">6.0f</span>;</span><br><span class="line">        Collider[] cols = Physics.OverlapBox(boxCenter, <span class="keyword">new</span> Vector3(<span class="number">2.0f</span>, <span class="number">2.0f</span>, <span class="number">5f</span>), targetTransform.transform.rotation, LayerMask.GetMask(<span class="string">&quot;Enemy&quot;</span>));</span><br><span class="line">        <span class="keyword">if</span>(cols != <span class="literal">null</span>)</span><br><span class="line">            <span class="keyword">foreach</span>(<span class="keyword">var</span> col <span class="keyword">in</span> cols)</span><br><span class="line">            &#123;</span><br><span class="line">                lockTarget = col.gameObject.transform;</span><br><span class="line">                <span class="comment">// lockTarget.position += col.gameObject.GetComponent&lt;CapsuleCollider&gt;().center;</span></span><br><span class="line">                lockDot.enabled = <span class="literal">true</span>;</span><br><span class="line">                isLocked = <span class="literal">true</span>;</span><br><span class="line">                targetTransform.GetComponentInParent&lt;Animator&gt;().SetBool(<span class="string">&quot;isLocked&quot;</span>, <span class="literal">true</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        lockTarget = <span class="literal">null</span>;</span><br><span class="line">        lockDot.enabled = <span class="literal">false</span>;</span><br><span class="line">        isLocked = <span class="literal">false</span>;</span><br><span class="line">        targetTransform.GetComponentInParent&lt;Animator&gt;().SetBool(<span class="string">&quot;isLocked&quot;</span>, <span class="literal">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// print(&quot;镜头锁定！&quot;);</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>函数调用</li></ul><ol><li>Tick与HandleRotation可在你的角色控制器中调用，以官方的ThirdPersonController.cs为例，可以加在原来的CameraRotation函数中，将其结构改为：</li></ol><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">CameraRotation</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// if there is an input and camera position is not fixed</span></span><br><span class="line">    <span class="keyword">if</span> (_input.look.sqrMagnitude &gt;= _threshold &amp;&amp; !LockCameraPosition)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//Don&#x27;t multiply mouse input by Time.deltaTime;</span></span><br><span class="line">        <span class="built_in">float</span> deltaTimeMultiplier = IsCurrentDeviceMouse ? <span class="number">1.0f</span> : Time.deltaTime;</span><br><span class="line"></span><br><span class="line">        _cinemachineTargetYaw += _input.look.x * deltaTimeMultiplier;</span><br><span class="line">        _cinemachineTargetPitch += _input.look.y * deltaTimeMultiplier;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    CameraManager.Tick(Time.fixedDeltaTime);</span><br><span class="line">    CameraManager.HandleRotation(Time.fixedDeltaTime, _input.look.x, _input.look.y);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>切换锁定状态函数SwitchLockOnState在任意Update函数调用即可，这里统一结构依旧在ThirdPersonController.cs调用：</li></ol><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">Update</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    _hasAnimator = TryGetComponent(<span class="keyword">out</span> _animator);</span><br><span class="line"></span><br><span class="line">    JumpAndGravity();</span><br><span class="line">    GroundedCheck();</span><br><span class="line">    Move();</span><br><span class="line">    SwitchWeapon();</span><br><span class="line">    <span class="comment">//Attack();</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (_input.lockOn)</span><br><span class="line">    &#123;</span><br><span class="line">        CameraManager.SwitchLockOnState();</span><br><span class="line">        _input.lockOn = <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>大功告成，将对应的物件置入脚本中，就可以使用你定义的锁定键来实现敌人的锁定和解锁啦！</p><p><img src="/./postImg/c04ebebbce334c59b24cb8cc6d3301bb.gif" alt="600px"></p><p>第一次写Unity的学习笔记，希望这个笔记能帮到正在学习Unity的你~</p><hr><p><em><strong>参考连接</strong></em>：</p><p><a href="https://www.youtube.com/watch?v=ud3_tderJOQ">Souls-like Part 155 Lock On Logic - Unity Tutorial</a></p><p><a href="https://www.bilibili.com/video/BV1gW411T7yb">[傅老師&#x2F;Unity教學][4&#x2F;27中午更新] DarkSouls複刻經典教程#第一季</a></p></span><style>    img[alt="300px"]{        width:300px;    }    img[alt="400px"]{        width:400px;    }    img[alt="500px"]{        width:500px;    }    img[alt="600px"]{        width:600px;    }    img[alt="800px"]{        width:800px;    }</style>]]></content>
      
      
      <categories>
          
          <category> Unity游戏开发 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>为Unity游戏搭建SpringBoot的服务端实现多人同步</title>
      <link href="/2023/11/03/words/"/>
      <url>/2023/11/03/words/</url>
      
        <content type="html"><![CDATA[<span style="font-size: 15px;"><p>最近在研1究Unity中多人游戏的实现，要保证在同一游戏里不同玩家所用的客户端之间的状态保持同步，需要配置统一的服务器来分发玩家状态的列表，以在客户端完成多人状态的更新。</p><p>做一个小的联机Demo，传输玩家的 <strong>位置、水平转角，动画状态</strong> 等信息，通信的逻辑是当客户端将玩家的信息更新到服务端的同时，将状态信息储存在服务端，服务端再响应给客户端当前游戏所有玩家的状态信息列表。</p><p>为什么要用Java的SpringBoot框架来搭服务器呢，是由于最近刚好学了Java和SpringBoot的一些知识，想着自己动手熟悉一下，当然如果有大佬能指出一些不足的地方就更好啦。网上找了一些SpringBoot集成WebSocket的用例之后，直接开干！</p><p>先来看看效果吧:</p><span id="more"></span><p><img src="/postImg/test.gif" alt="600px"></p><p>分别介绍一下服务端和客户端的实现：</p><hr><h3 id="服务端："><a href="#服务端：" class="headerlink" title="服务端："></a>服务端：</h3><p>SpringBoot项目的代码结构如下：</p><p><img src="/postImg/springboot1.png" alt="800px"></p><br/><p>首先，在application.yml配置服务器端口： </p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">port:</span> <span class="number">8888</span></span><br></pre></td></tr></table></figure><p>pom.xml中引入相应的依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-websocket<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>fastjson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.47<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>然后创建消息类Message和玩家信息类PlayerInfo两个实体类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Message</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> String type;</span><br><span class="line">    <span class="keyword">public</span> String info;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PlayerInfo</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">float</span> x, y, z;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">float</span> ry; <span class="comment">//旋转，只考虑角色的水平旋转</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">float</span> speed; <span class="comment">//玩家移动的速度</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">float</span> motionSpeed; <span class="comment">//玩家移动动画速度</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> roll; <span class="comment">//玩家是否翻滚</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接下来编写三层架构。主要的逻辑为，当Controller层收到客户端的数据包后，通过注解@OnMessage调用onMessage方法，将数据包交给Service层处理，然后通过Service请求返回当前所有玩家的状态列表，打包成Message再转换Json格式发送给客户端。</p><p><img src="/postImg/springboot2.png" alt="800px"></p><p>Controller层是负责和前端（客户端）打交道的，为了实现简单，这里采用了WebSocket来进行信息的接发，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ServerEndpoint(&quot;/&quot;)</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WebSocketServer</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Session session;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> PlayerInfoServiceImpl playerInfoServiceImpl=<span class="keyword">new</span> <span class="title class_">PlayerInfoServiceImpl</span>();</span><br><span class="line"></span><br><span class="line">  <span class="comment">//收到消息时执行</span></span><br><span class="line">    <span class="meta">@OnMessage</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onMessage</span><span class="params">(String message, Session session)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;从客户端收到的消息：&quot;</span> + message);</span><br><span class="line">        playerInfoServiceImpl.saveInfoService(message);</span><br><span class="line">        sendMessage(<span class="keyword">new</span> <span class="title class_">Message</span>(MsgTypeConstant.ALL_PLAYER_INFO,</span><br><span class="line">                JSONArray.toJSONString(playerInfoServiceImpl.getPlayInfoList())));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sendMessage</span><span class="params">(Message message)</span> <span class="keyword">throws</span> IOException&#123;</span><br><span class="line">        <span class="built_in">this</span>.session.getAsyncRemote().sendText(JSONArray.toJSONString(message));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>顺着这个思路，Service层就负责两件事，一个是将收到的数据保存到数据库中的玩家状态列表，一个是将数据库中的玩家状态列表返回出来。代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PlayerInfoServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">PlayerInfoService</span> &#123;</span><br><span class="line">  <span class="comment">//将数据保存至玩家状态列表</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">saveInfoService</span><span class="params">(String message)</span> &#123;</span><br><span class="line">        String[] msgList = message.split(<span class="string">&quot;&amp;&quot;</span>);<span class="comment">//以&amp;作为数据包的分割字符</span></span><br><span class="line">        <span class="keyword">for</span>(String _msg : msgList)&#123;</span><br><span class="line">            <span class="keyword">if</span>(_msg.length() &gt; <span class="number">0</span>)&#123;</span><br><span class="line">                <span class="type">Message</span> <span class="variable">msg</span> <span class="operator">=</span> JSON.parseObject(_msg, Message.class);</span><br><span class="line">                <span class="keyword">if</span>(msg.type.equals(MsgTypeConstant.UPDATE_PLAYER_INFO))&#123;</span><br><span class="line">                    <span class="type">PlayerInfo</span> <span class="variable">thisPlayer</span> <span class="operator">=</span> JSON.parseObject(msg.info, PlayerInfo.class);</span><br><span class="line">                    userInfoMapper.userInfo.put(thisPlayer.name, thisPlayer);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//从玩家状态列表获取数据</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> HashMap&lt;String, PlayerInfo&gt; <span class="title function_">getPlayInfoList</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> userInfoMapper.userInfo;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Mapper层负责和数据库打交道，为了简单起见，这里就不涉及数据库的存储，先将玩家状态列表保存至Mapper层</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">userInfoMapper</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//用于储存所有玩家的状态信息</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> HashMap&lt;String, PlayerInfo&gt; userInfo = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ok，简单的服务端就搭建好了，当多个玩家通过这个端口访问服务器时，就可以实时同步他们的信息。如果后面时间允许，应该还得补上数据库的访问以及各种异常处理。下面来看看客户端的一些主要代码。</p><hr><h3 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h3><p>创建PlayerInfo.cs脚本构造玩家状态类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PlayerInfo</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> string name;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">float</span> x, y, z;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">float</span> ry; <span class="comment">//旋转，只用考虑角色的水平旋转，节省带宽</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">float</span> speed; <span class="comment">//玩家移动的速度</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">float</span> motionSpeed; <span class="comment">//玩家移动动画速度</span></span><br><span class="line">    <span class="keyword">public</span> bool roll; <span class="comment">//玩家是否翻滚</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">PlayerInfo</span><span class="params">(string n, Vector3 pos, Vector3 rot, <span class="type">float</span> speed, <span class="type">float</span> motionSpeed, bool roll)</span></span><br><span class="line">    &#123;</span><br><span class="line">        name = n;</span><br><span class="line">        x = pos.x; y = pos.y; z = pos.z;</span><br><span class="line">        ry = rot.y;</span><br><span class="line">        <span class="built_in">this</span>.speed = speed;</span><br><span class="line">        <span class="built_in">this</span>.motionSpeed = motionSpeed;</span><br><span class="line">        <span class="built_in">this</span>.roll = roll;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">PlayerInfo</span><span class="params">()</span> &#123; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setPos</span><span class="params">(Vector3 pos)</span></span><br><span class="line">    &#123;</span><br><span class="line">        x = pos.x; y = pos.y;z = pos.z;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setRot</span><span class="params">(Vector3 rot)</span></span><br><span class="line">    &#123;</span><br><span class="line">        ry = rot.y;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建UserClient.cs脚本负责管理与服务端的连接和数据收发，在Start函数中，进行服务端的连接。并且在Update函数中将当前玩家的状态定时传至服务端，并等待服务端响应玩家状态信息列表。注意利用WebSocket定时收发操作均为异步进行。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//客户端</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//定义消息类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Message</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> string type;</span><br><span class="line">    <span class="keyword">public</span> string info;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Message</span><span class="params">(string _type, string _info)</span></span><br><span class="line">    &#123;</span><br><span class="line">        type = _type;</span><br><span class="line">        info = _info;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserClient</span> : MonoBehaviour</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">float</span> <span class="variable">sendMsgCD</span> <span class="operator">=</span> <span class="number">0.1f</span>; <span class="comment">//发送数据的时隔</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> PlayerInfo playerInfo;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Queue&lt;Message&gt; msgQueue = <span class="keyword">new</span> <span class="title class_">Queue</span>&lt;Message&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> ClientWebSocket webSocket;</span><br><span class="line">    <span class="keyword">static</span> <span class="type">float</span> <span class="variable">ntime</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">Awake</span><span class="params">()</span></span><br><span class="line">    &#123;</span><br><span class="line">        playerInfo = <span class="keyword">new</span> <span class="title class_">PlayerInfo</span>();</span><br><span class="line">        playerInfo.name =<span class="string">&quot;Starry&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">Start</span><span class="params">()</span></span><br><span class="line">    &#123;</span><br><span class="line"><span class="type">string</span> <span class="variable">ip</span> <span class="operator">=</span> <span class="string">&quot;127.0.0.1&quot;</span> ;</span><br><span class="line">        <span class="type">int</span> <span class="variable">port</span> <span class="operator">=</span> <span class="number">8888</span>;</span><br><span class="line">        Connect(ip, port);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">Update</span><span class="params">()</span></span><br><span class="line">    &#123;</span><br><span class="line">        UpdatePlayerInfo();</span><br><span class="line">        HandlePlayerInfo();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">Connect</span><span class="params">(string ip, <span class="type">int</span> port)</span></span><br><span class="line">    &#123;</span><br><span class="line">        webSocket = <span class="keyword">new</span> <span class="title class_">ClientWebSocket</span>();</span><br><span class="line">        webSocket.ConnectAsync(<span class="keyword">new</span> <span class="title class_">Uri</span>(<span class="string">&quot;ws://&quot;</span> + ip + <span class="string">&quot;:&quot;</span> + port), CancellationToken.None);</span><br><span class="line">        print(<span class="string">&quot;连接成功&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> async Task <span class="title function_">SendMessage</span><span class="params">(Message msg)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">string</span> <span class="variable">str</span> <span class="operator">=</span> JsonConvert.SerializeObject(msg);</span><br><span class="line">        <span class="type">byte</span>[] bytes = Encoding.UTF8.GetBytes(str + <span class="string">&#x27;&amp;&#x27;</span>);</span><br><span class="line"></span><br><span class="line">        await webSocket.SendAsync(<span class="keyword">new</span> <span class="title class_">ArraySegment</span>&lt;<span class="type">byte</span>&gt;(bytes), WebSocketMessageType.Text, <span class="literal">true</span>, CancellationToken.None);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 接收服务器的响应</span></span><br><span class="line">        <span class="type">byte</span>[] buffer = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="type">WebSocketReceiveResult</span> <span class="variable">result</span> <span class="operator">=</span> await webSocket.ReceiveAsync(<span class="keyword">new</span> <span class="title class_">ArraySegment</span>&lt;<span class="type">byte</span>&gt;(buffer), CancellationToken.None);</span><br><span class="line">        <span class="type">string</span> <span class="variable">response</span> <span class="operator">=</span> Encoding.UTF8.GetString(buffer, <span class="number">0</span>, result.Count);</span><br><span class="line">        print(<span class="string">&quot;服务器响应: &quot;</span> + response);</span><br><span class="line"></span><br><span class="line">        msgQueue.Enqueue(JsonConvert.DeserializeObject&lt;Message&gt;(response));</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">UpdatePlayerInfo</span><span class="params">()</span></span><br><span class="line">    &#123;</span><br><span class="line">     <span class="comment">//设置计时实现周期更新数据</span></span><br><span class="line">        ntime += Time.deltaTime;</span><br><span class="line">        <span class="keyword">if</span>(ntime &gt; sendMsgCD)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">Task</span> <span class="variable">task</span> <span class="operator">=</span> SendMessage(<span class="keyword">new</span> <span class="title class_">Message</span>(<span class="string">&quot;UpdatePlayerInfo&quot;</span>, JsonConvert.SerializeObject(playerInfo)));</span><br><span class="line">            ntime = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">HandlePlayerInfo</span><span class="params">()</span></span><br><span class="line">    &#123;</span><br><span class="line">    <span class="comment">//从玩家状态队列中处理数据</span></span><br><span class="line">        <span class="keyword">if</span> (msgQueue.Count &gt; <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">Message</span> <span class="variable">msg</span> <span class="operator">=</span> msgQueue.Dequeue();</span><br><span class="line">            print(msg.type);</span><br><span class="line">            <span class="keyword">switch</span> (msg.type)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&quot;AllPlayerInfo&quot;</span>:</span><br><span class="line">                    <span class="comment">//获取所有玩家信息的列表</span></span><br><span class="line">                    Dictionary&lt;string, PlayerInfo&gt; listInfo = JsonConvert.DeserializeObject&lt;Dictionary&lt;string, PlayerInfo&gt;&gt;(msg.info);</span><br><span class="line">                    PlayerPool.ins.updatePlayer(listInfo);<span class="comment">//交付PlayerPool处理玩家的状态更新</span></span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>创建PlayerPool.cs脚本用于处理玩家状态的更新（如位置、角度的变换、动画参数等）这里因为要在静态函数里调用该类的方法，注意要创建单例模式。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PlayerPool</span> : MonoBehaviour</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//联机模块代码</span></span><br><span class="line">    <span class="comment">//为场景内的所有玩家创建模型并同步移动</span></span><br><span class="line">    <span class="keyword">public</span> GameObject playerPrefab;</span><br><span class="line">    <span class="keyword">public</span> bool instantSelf; <span class="comment">//联机模式是否生成自己的模型</span></span><br><span class="line">    Dictionary&lt;string, GameObject&gt; models = <span class="keyword">new</span> <span class="title class_">Dictionary</span>&lt;string, GameObject&gt;();  <span class="comment">//根据玩家的名字找到对应的模型</span></span><br><span class="line">    Dictionary&lt;string, PlayerInfo&gt; playerState = <span class="keyword">new</span> <span class="title class_">Dictionary</span>&lt;string, PlayerInfo&gt;(); <span class="comment">//玩家名字与玩家的状态的字典</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Vector3 _posVel;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">updatePlayer</span><span class="params">(Dictionary&lt;string, PlayerInfo&gt; list)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//尝试寻找玩家</span></span><br><span class="line">        foreach(<span class="keyword">var</span> p in list)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(PlayerPrefs.GetString(<span class="string">&quot;PlayerName&quot;</span>) != p.Key || instantSelf)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (models.ContainsKey(p.Key))</span><br><span class="line">                &#123;</span><br><span class="line">                    playerState[p.Key] = p.Value;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                &#123;</span><br><span class="line">                    print(<span class="string">&quot;生成模型&quot;</span>);</span><br><span class="line">                    models[p.Key] = Instantiate(playerPrefab, <span class="keyword">new</span> <span class="title class_">Vector3</span>(p.Value.x, p.Value.y, p.Value.z),</span><br><span class="line">                        Quaternion.Euler(<span class="keyword">new</span> <span class="title class_">Vector3</span>(<span class="number">0</span>, p.Value.ry, <span class="number">0</span>)));</span><br><span class="line">                    playerState[p.Key] = p.Value;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">Update</span><span class="params">()</span></span><br><span class="line">    &#123;</span><br><span class="line">        TransmitState();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">TransmitState</span><span class="params">()</span></span><br><span class="line">    &#123;</span><br><span class="line">    <span class="comment">//更新玩家模型的状态</span></span><br><span class="line">        foreach (<span class="keyword">var</span> p in playerState)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">Rigidbody</span> <span class="variable">_rb</span> <span class="operator">=</span> models[p.Key].GetComponent&lt;Rigidbody&gt;();</span><br><span class="line">            <span class="type">Animator</span> <span class="variable">_animator</span> <span class="operator">=</span> models[p.Key].GetComponent&lt;Animator&gt;();</span><br><span class="line">            _posVel = _rb.velocity;</span><br><span class="line">            models[p.Key].transform.position = Vector3.SmoothDamp(models[p.Key].transform.position,</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">Vector3</span>(p.Value.x, p.Value.y, p.Value.z), ref _posVel, <span class="number">0.05f</span>);</span><br><span class="line"></span><br><span class="line">            models[p.Key].transform.rotation = Quaternion.Euler</span><br><span class="line">               (<span class="number">0</span>, p.Value.ry, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//更新角色预制体动画状态</span></span><br><span class="line">            _animator.SetFloat(<span class="string">&quot;MotionSpeed&quot;</span>, p.Value.motionSpeed);</span><br><span class="line">            _animator.SetFloat(<span class="string">&quot;Speed&quot;</span>, p.Value.speed);</span><br><span class="line">            _animator.SetBool(<span class="string">&quot;Roll&quot;</span>, p.Value.roll);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//采用单例模式</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> PlayerPool ins;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">Awake</span><span class="params">()</span></span><br><span class="line">    &#123;</span><br><span class="line">        ins = <span class="built_in">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在玩家控制的函数中，可以更新当前玩家的状态信息。这里可以我放在的控制玩家移动的函数Move()中。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">Move</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="comment">//...</span></span><br><span class="line"></span><br><span class="line">  UserClient.playerInfo.setPos(transform.position);</span><br><span class="line">  UserClient.playerInfo.setRot(transform.rotation.eulerAngles);</span><br><span class="line">  UserClient.playerInfo.speed = _animationBlend;</span><br><span class="line">  UserClient.playerInfo.motionSpeed = inputMagnitude;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>将脚本挂载到场景中</p><p><img src="/postImg/Snipaste_2023-11-04_19-05-23.png" alt="800px"></p><div style="color: #999; text-align: center;" >挂载脚本</div><p>大功告成，打开服务端，然后开启多个客户端，就能看到多个玩家在场景中啦。</p><p>不过由于目前的玩家状态信息很有限，如跳跃、攻击、血量等还没做，如果后面条件允许也会补上的（画饼）</p><hr><p><em><strong>参考连接</strong></em>：<a href="https://www.bilibili.com/video/BV1qS4y1C7DF">【村里通网啦】制作我的第一个unity多人联机游戏demo（socket实现）</a></p></span><style>    img[alt="300px"]{        width:300px;    }    img[alt="400px"]{        width:400px;    }    img[alt="500px"]{        width:500px;    }    img[alt="600px"]{        width:600px;    }    img[alt="800px"]{        width:800px;    }</style>]]></content>
      
      
      <categories>
          
          <category> Unity游戏开发 </category>
          
      </categories>
      
      
    </entry>
    
    
  
  
    
    
    <entry>
      <title>欢迎光临</title>
      <link href="/index.html"/>
      <url>/index.html</url>
      
        <content type="html"><![CDATA[<span style="font-size: 15px;"><h3 id="这里有什么"><a href="#这里有什么" class="headerlink" title="这里有什么"></a>这里有什么</h3><br/><p>两辆汽车必须要同时决定如何应对道路上的突然障碍物。</p><p>这个博弈的参与者是两位司机，他们有相同的行动可供选择：留在自己的车道上或向右转弯。这个博弈的信息结构非常简单：两个玩家需要同时做出决定，而不知道另一个玩家的决定（我们称这种设置为同步博弈）。博弈的结果通过一个成本（如图所示）来表示，它可以描述每个玩家的汽车所遭受的损失。将其写成矩阵形式可以表示为：</p><h3 id="紧急制动博弈1"><a href="#紧急制动博弈1" class="headerlink" title="紧急制动博弈1"></a>紧急制动博弈1</h3><br/><p>两辆汽车必须要同时决定如何应对道路上的突然障碍物。</p><p>这个博弈的参与者是两位司机，他们有相同的行动可供选择：留在自己的车道上或向右转弯。这个博弈的信息结构非常简单：两个玩家需要同时做出决定，而不知道另一个玩家的决定（我们称这种设置为同步博弈）。博弈的结果通过一个成本（如图所示）来表示，它可以描述每个玩家的汽车所遭受的损失。将其写成矩阵形式可以表示为：</p><img style="width:600px;" src="https://origami-blog-asset.oss-cn-shanghai.aliyuncs.com/images/2.jpg"><div style="color: #999; text-align: center;">星河乐章</div></span>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/categories/index.html"/>
      <url>/categories/index.html</url>
      
        <content type="html"><![CDATA[<p>这里是分类页</p>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>about</title>
      <link href="/about/index.html"/>
      <url>/about/index.html</url>
      
        <content type="html"><![CDATA[<span style="font-size: 14px;"><p>两辆汽车必须要同时决定如何应对道路上的突然障碍物。</p><p>这个博弈的参与者是两位司机，他们有相同的行动可供选择：留在自己的车道上或向右转弯。这个博弈的信息结构非常简单：两个玩家需要同时做出决定，而不知道另一个玩家的决定（我们称这种设置为同步博弈）。博弈的结果通过一个成本（如图所示）来表示，它可以描述每个玩家的汽车所遭受的损失。将其写成矩阵形式可以表示为：</p><img style="width:600px;" src="https://origami-blog-asset.oss-cn-shanghai.aliyuncs.com/images/2.jpg"><div style="color: #999; text-align: center;">星河乐章</div></span>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>words</title>
      <link href="/words/index.html"/>
      <url>/words/index.html</url>
      
        <content type="html"><![CDATA[<p>这里显示的内容无效，改页显示_post下的内容</p>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/pices/index.html"/>
      <url>/pices/index.html</url>
      
        <content type="html"><![CDATA[<span style="font-size: 15px;"><div style="font-size: 18px; text-align: center;" >这里放一些感觉还算看得过去的画作，希望自己以后也能一直坚持对绘画的热爱吧~</div><hr><p><img src="/./postImg/1.jpg" alt="300px"></p><div style="color: #999; text-align: center;">时砾逐光 2022.6.21</div><br/><p><img src="/./postImg/2.jpg" alt="600px"></p><div style="color: #999; text-align: center;" >星河乐章 2022.10.19</div><br/><p><img src="/./postImg/2023-6-24.png" alt="300px"></p><div style="color: #999; text-align: center;" >深海明灯 2023.6.24</div><br/><p><img src="/./postImg/2020-7-16.jpg" alt="300px"></p><div style="color: #999; text-align: center;" >漫舞 2020.7.16</div><br/><p><img src="/./postImg/2020-9-24.jpg" alt="400px"></p><div style="color: #999; text-align: center;" >终将成为你 2020.9.14</div><br/><p><img src="/./postImg/2021-4-26.jpg" alt="300px"></p><div style="color: #999; text-align: center;" >交给我吧，希儿 2021.4.26</div><br/><p><img src="/./postImg/2021-6-14.jpg" alt="300px"></p><div style="color: #999; text-align: center;" >找到你了，希儿 2021.6.14</div><br/><p><img src="/./postImg/2022-7-30.jpg" alt="600px"></p><div style="color: #999; text-align: center;" >MeUmy的日常 2022.7.30</div><br/><p><img src="/./postImg/2021-5-14.jpg" alt="600px"></p><div style="color: #999; text-align: center;" >2021泠鸢生贺 2021.5.14</div><br/><p><img src="/./postImg/2022-8-28.jpg" alt="300px"></p><div style="color: #999; text-align: center;" >流星入梦 2022.8.28</div><br/><p><img src="/./postImg/2023-1-12.jpg" alt="600px"></p><div style="color: #999; text-align: center;" >结束乐队！2023.1.12</div><br/><p><img src="/./postImg/2023-2-18.jpg" alt="600px"></p><div style="color: #999; text-align: center;" >随蝴蝶一起消散吧！2023.2.18</div><br/><p><img src="/./postImg/2021-8-15.png" alt="300px"></p><div style="color: #999; text-align: center;" >魔法少女的王座 2021.8.15</div><br/><p><img src="/./postImg/2022-1-20.png" alt="300px"></p><div style="color: #999; text-align: center;" >神里绫华 2022.1.20</div><br/><hr><div style="text-align: center;" >如果你能看到这，非常希望你能喜欢~愿你我都能找到生活中的热爱 : )</div></span><style>    img[alt="300px"]{        width:300px;    }    img[alt="400px"]{        width:400px;    }    img[alt="500px"]{        width:500px;    }    img[alt="600px"]{        width:600px;    }    img[alt="800px"]{        width:800px;    }</style>]]></content>
      
    </entry>
    
    
  
</search>
